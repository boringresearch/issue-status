{"version":3,"sources":["components/status/statuses.js","components/status/useStatus.js","components/status/useRefetch.js","components/status/index.js","components/useIssues.js","components/header/index.js","components/components/skeleton.js","components/components/component/statuses.js","components/components/component/useStatus.js","components/components/component/status.js","components/components/component/index.js","components/useDidMount.js","components/components/index.js","components/incidents/incident/index.js","components/incidents/skeleton.js","components/incidents/index.js","components/smaintenance/maintenance/index.js","components/smaintenance/skeleton.js","components/smaintenance/index.js","components/footer/index.js","components/App.js","serviceWorker.js","index.js"],"names":["statuses","operational","message","backgroundColour","issues","outage","useStatus","components","status","setStatus","useState","useEffect","statusSet","getComponentLabelPercent","label","filter","component","labels","find","componentLabel","name","length","useRefetch","refetch","updateTimeAgoDep","timeAgo","setTimeAgo","moment","Date","localStorage","getItem","fromNow","interval","setInterval","clearInterval","StatusBar","styled","div","_templateObject","_taggedTemplateLiteral","props","StatusTitle","h2","_templateObject2","Reload","button","_templateObject3","Code","code","_templateObject4","Status","_ref","loading","error","_jsxs","_Fragment","children","hasError","_jsx","JSON","stringify","errors","onClick","useIssues","results","setResults","setError","setLoading","concat","fetchData","parse","fetch","process","then","response","json","data","setItem","catch","toString","h1","Logo","img","Container","Header","src","alt","colour","performanceIssues","partialOutage","majorOutage","unknown","Object","values","toLowerCase","Component","title","useDidMount","hasMounted","setHasMounted","Components","map","id","Skeleton","Card","active","Details","Title","Comment","_templateObject5","Created","_templateObject6","Incident","incident","closed_at","created_at","format","toUpperCase","ReactMarkdown","body","NoFound","Incidents","incidents","Maintenance","maintenance","href","html_url","source","smaintenance","Branding","a","visible","Footer","REACT_APP_BRANDING","rel","target","ComponentsContainer","componentsLoading","componentsError","componentsResults","componentsRefetch","incidentsLoading","incidentsError","incidentsResults","incidentsRefetch","smaintenanceLoading","smaintenanceError","smaintenanceResults","smaintenanceRefetch","Boolean","window","location","hostname","match","ReactDOM","render","React","StrictMode","App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.f5999536.chunk.js","sourcesContent":["const statuses = {\n  operational: {\n    message: \"All Systems Operational\",\n    backgroundColour: \"#3da751\",\n  },\n  issues: {\n    message: \"Some systems are experiencing issues\",\n    backgroundColour: \"#4990e2\",\n  },\n  outage: {\n    message: \"Some systems are experiencing a major outage\",\n    backgroundColour: \"#d94430\",\n  },\n};\n\nexport default statuses;\n","import { useState, useEffect } from \"react\";\nimport statuses from \"./statuses\";\n\nconst useStatus = (components) => {\n  const [status, setStatus] = useState();\n\n  useEffect(() => {\n    let statusSet = false;\n\n    if (getComponentLabelPercent(components, \"operational\") < 70) {\n      setStatus(statuses.issues);\n      statusSet = true;\n    }\n\n    if (getComponentLabelPercent(components, \"major outage\") > 0) {\n      setStatus(statuses.outage);\n      statusSet = true;\n    }\n\n    if (!statusSet) setStatus(statuses.operational);\n  }, [components]);\n\n  return [status];\n};\n\nexport default useStatus;\n\nconst getComponentLabelPercent = (components, label) =>\n  (components.filter((component) =>\n    component.labels.find((componentLabel) => componentLabel.name === label)\n  ).length *\n    100) /\n  components.length;\n","import { useState, useEffect } from \"react\";\nimport moment from \"moment\";\n\nconst useRefetch = (refetch, updateTimeAgoDep) => {\n  const [timeAgo, setTimeAgo] = useState(\n    moment(\n      new Date(localStorage.getItem(`issueStatusLastFetchcomponent`))\n    ).fromNow()\n  );\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      if (\n        new Date(localStorage.getItem(`issueStatusLastFetchcomponent`)) <\n        new Date() - 240000\n      ) {\n        refetch(() => {\n          setTimeAgo(\n            moment(\n              new Date(localStorage.getItem(`issueStatusLastFetchcomponent`))\n            ).fromNow()\n          );\n        });\n      } else {\n        setTimeAgo(\n          moment(\n            new Date(localStorage.getItem(`issueStatusLastFetchcomponent`))\n          ).fromNow()\n        );\n      }\n    }, 1000);\n\n    return () => {\n      clearInterval(interval);\n    };\n  }, [refetch]);\n\n  useEffect(() => {\n    setTimeAgo(\n      moment(\n        new Date(localStorage.getItem(`issueStatusLastFetchcomponent`))\n      ).fromNow()\n    );\n  }, [updateTimeAgoDep]);\n\n  return [timeAgo];\n};\n\nexport default useRefetch;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport useStatus from \"./useStatus\";\nimport useRefetch from \"./useRefetch\";\n\nconst StatusBar = styled.div`\n  background-color: ${(props) =>\n    props.backgroundColour ? props.backgroundColour : \"#b1b1b1\"};\n  color: white;\n  padding: 16px;\n  border-radius: 3px;\n  margin-bottom: 32px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  flex-wrap: wrap;\n  transition: 0.3s;\n`;\n\nconst StatusTitle = styled.h2`\n  font-size: 20px;\n  margin: 0;\n  font-weight: normal;\n`;\n\nconst Reload = styled.button`\n  background-color: transparent;\n  color: white;\n  text-decoration: underline;\n  border: none;\n  cursor: pointer;\n  text-align: right;\n  padding: 0;\n`;\n\nconst Code = styled.code`\n  white-space: pre-wrap;\n  display: block;\n`;\n\nconst Status = ({ loading, error, components, refetch }) => {\n  const [status] = useStatus(components);\n  const [timeAgo] = useRefetch(refetch, loading);\n\n  return (\n    <>\n      {error.hasError && (\n        <Code>\n          <div>An error occured</div>\n          <div>\n            You may have exceeded the rate limit. Try again in 1 hour to fetch\n            the latest data.\n          </div>\n          {JSON.stringify(error.errors, null, 3)}\n        </Code>\n      )}\n      <StatusBar backgroundColour={status?.backgroundColour}>\n        <StatusTitle>{status?.message}</StatusTitle>\n        <Reload onClick={refetch}>{loading ? \"reloading\" : timeAgo}</Reload>\n      </StatusBar>\n    </>\n  );\n};\n\n// TODO: change all systems status based on current status of all components\nexport default Status;\n","import { useState, useEffect } from \"react\";\n\nconst useIssues = (label) => {\n  const [results, setResults] = useState([]);\n  const [error, setError] = useState();\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    // GitHub rate limiting: 60 requests per hour/unauthenticated - fetches 15 times per hour / sending 30 requests (2 requests per fetch) and caches in localStorage\n    if (\n      new Date(localStorage.getItem(`issueStatusLastFetch${label}`)) <\n      new Date() - 240000\n    ) {\n      fetchData(setLoading, setError, setResults, label);\n    } else {\n      setResults(JSON.parse(localStorage.getItem(`issueStatus${label}`)));\n      setLoading(false);\n      setError();\n    }\n  }, [label]);\n\n  return [\n    loading,\n    error,\n    results || [],\n    () => fetchData(setLoading, setError, setResults, label),\n  ];\n};\n\nexport default useIssues;\n\nconst fetchData = (setLoading, setError, setResults, label) => {\n  setLoading(true);\n  fetch(\n    `https://api.github.com/repos/${process.env.REACT_APP_REPOSITORY}/issues?state=all&labels=issue status,${label}`\n  )\n    .then((response) => {\n      return response.json();\n    })\n    .then((data) => {\n      setError();\n      localStorage.setItem(`issueStatusLastFetch${label}`, new Date());\n      localStorage.setItem(`issueStatus${label}`, JSON.stringify(data));\n      setResults(data);\n      setLoading(false);\n    })\n    .catch((error) => {\n      setError(error.toString());\n      localStorage.setItem(`issueStatusLastFetch${label}`, new Date());\n      setResults(JSON.parse(localStorage.getItem(`issueStatus${label}`)));\n      setLoading(false);\n    });\n};\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst Title = styled.h1`\n  text-align: center;\n  margin-top: 0;\n  margin-bottom: 0;\n`;\n\nconst Logo = styled.img``;\n\nconst Container = styled.div`\n  text-align: center;\n  margin-bottom: 16px;\n`;\n\nconst Header = () =>\n  process.env.REACT_APP_LOGO || process.env.REACT_APP_NAME ? (\n    <Container>\n      {process.env.REACT_APP_LOGO ? (\n        <Logo\n          src={process.env.REACT_APP_LOGO}\n          alt={process.env.REACT_APP_NAME}\n        />\n      ) : (\n        <Title>{process.env.REACT_APP_NAME}</Title>\n      )}\n    </Container>\n  ) : null;\n\nexport default Header;\n","import styled from \"styled-components\";\n\nexport default styled.div`\n  width: 100%;\n  height: 44px;\n  border-radius: 3px;\n  background-color: #f7f8f9;\n\n  :not(:last-child) {\n    margin-bottom: 8px;\n  }\n`;\n","export default {\n  operational: {\n    name: \"Operational\",\n    colour: \"#247234\",\n    backgroundColour: \"rgba(61, 167, 81, 0.1)\",\n  },\n  performanceIssues: {\n    name: \"Performance Issues\",\n    colour: \"#2f5888\",\n    backgroundColour: \"rgba(73, 144, 226, 0.1)\",\n  },\n  partialOutage: {\n    name: \"Partial Outage\",\n    colour: \"#74582a\",\n    backgroundColour: \"rgba(255, 198, 103, 0.1)\",\n  },\n  majorOutage: {\n    name: \"Major Outage\",\n    colour: \"#8e3b31\",\n    backgroundColour: \"rgba(217, 68, 48, 0.1)\",\n  },\n  unknown: {\n    name: \"Unknown\",\n    colour: \"#6e6b6b\",\n    backgroundColour: \"rgba(177, 177, 177, 0.1)\",\n  },\n};\n","import { useState, useEffect } from \"react\";\nimport statuses from \"./statuses\";\n\nconst useStatus = (labels) => {\n  const [status, setStatus] = useState();\n\n  useEffect(() => {\n    setStatus(\n      Object.values(statuses).find((status) =>\n        labels.find((label) => label.name === status.name.toLowerCase())\n      )\n    );\n  }, [labels]);\n\n  if (!status) setStatus(statuses.unknown);\n\n  return [status];\n};\n\nexport default useStatus;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport useStatus from \"./useStatus\";\n\nconst Container = styled.div`\n  color: ${(props) => props.colour};\n  background-color: ${(props) => props.backgroundColour};\n  padding: 5px 12px;\n  border-radius: 16px;\n  font-size: 13px;\n  transition: 0.3s;\n`;\n\nconst Status = ({ labels }) => {\n  const [status] = useStatus(labels);\n\n  return (\n    <Container\n      colour={status?.colour}\n      backgroundColour={status?.backgroundColour}\n    >\n      {status?.name}\n    </Container>\n  );\n};\n\nexport default Status;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport Status from \"./status\";\n\nconst Container = styled.div`\n  background-color: #f7f8f9;\n  padding: 8px 16px;\n  border-radius: 3px;\n  justify-content: space-between;\n  align-items: center;\n  display: flex;\n\n  :not(:last-child) {\n    margin-bottom: 8px;\n  }\n`;\n\nconst Component = ({ component }) => {\n  return (\n    <Container>\n      {component.title} <Status labels={component.labels} />\n    </Container>\n  );\n};\n\nexport default Component;\n","import { useEffect, useState } from \"react\";\n\nconst useDidMount = () => {\n  const [hasMounted, setHasMounted] = useState();\n\n  useEffect(() => {\n    setHasMounted(true);\n  }, []);\n\n  return [hasMounted];\n};\n\nexport default useDidMount;\n","import React from \"react\";\nimport Skeleton from \"./skeleton\";\nimport Component from \"./component\";\nimport useDidMount from \"../useDidMount\";\n\nconst Components = ({ loading, components }) => {\n  const [hasMounted] = useDidMount();\n\n  return !loading || hasMounted ? (\n    components?.length > 0 ? (\n      components?.map((component) => (\n        <Component key={component.id} component={component} />\n      ))\n    ) : (\n      <p>No Components found.</p>\n    )\n  ) : (\n    <>\n      <Skeleton />\n      <Skeleton />\n      <Skeleton />\n    </>\n  );\n};\n\nexport default Components;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport moment from \"moment\";\nimport ReactMarkdown from \"react-markdown\";\n\nconst Card = styled.div`\n  transition: 0.3s;\n  border-left: 16px solid\n    ${(props) =>\n      props.active ? \"rgba(177, 177, 177,0.2)\" : \"rgba(73, 144, 226, 0.2)\"};\n  background-color: white;\n  border-radius: 3px;\n  padding: 16px;\n  box-shadow: 0px 0px 33px -32px rgba(0, 0, 0, 0.75);\n  margin-top: 8px;\n\n  :not(:last-child) {\n    margin-bottom: 16px;\n  }\n`;\n\nconst Details = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 3px;\n`;\n\nconst Title = styled.div`\n  margin-right: 16px;\n  font-weight: bold;\n  margin-bottom: 8px;\n  color: #1e1e1e;\n`;\n\nconst Comment = styled.div`\n  white-space: break-spaces;\n  color: #1e1e1e;\n`;\n\nconst Status = styled.div`\n  color: ${(props) => (props.active ? \"#6e6b6b\" : \"#2f5888\")};\n  background-color: ${(props) =>\n    props.active ? \"rgba(177, 177, 177, 0.1)\" : \"rgba(73, 144, 226, 0.1)\"};\n  padding: 5px 12px;\n  border-radius: 16px;\n  font-size: 13px;\n  transition: 0.3s;\n`;\n\nconst Created = styled.div`\n  font-size: 13px;\n  color: #6e6b6b;\n  font-weight: bold;\n`;\n\nconst Incident = ({ incident }) => (\n  <Card active={incident.closed_at}>\n    <Details>\n      <Created>\n        {moment(incident.created_at)\n          .format(\"MMMM Do YYYY, h:mm a\")\n          .toUpperCase()}\n      </Created>\n      <Status active={incident.closed_at}>\n        {incident.closed_at ? \"Closed\" : \"Active\"}\n      </Status>\n    </Details>\n    <Title>{incident.title}</Title>\n    <Comment>\n      <ReactMarkdown>{incident.body}</ReactMarkdown>\n    </Comment>\n  </Card>\n);\n\nexport default Incident;\n","import styled from \"styled-components\";\n\nexport default styled.div`\n  width: 100%;\n  height: 84px;\n  border-radius: 3px;\n  background-color: white;\n  box-shadow: 0px 0px 33px -32px rgba(0, 0, 0, 0.75);\n\n  :not(:last-child) {\n    margin-bottom: 8px;\n  }\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport Incident from \"./incident\";\nimport Skeleton from \"./skeleton\";\nimport useDidMount from \"../useDidMount\";\n\nconst Container = styled.div`\n  margin: 32px auto 0 auto;\n  max-width: 1040px;\n`;\n\nconst Title = styled.div`\n  padding: 0 16px;\n  font-size: 20px;\n  margin-bottom: 16px;\n`;\n\nconst NoFound = styled.div`\n  margin: 0 8px;\n`;\n\nconst Incidents = ({ loading, incidents }) => {\n  const [hasMounted] = useDidMount();\n\n  return (\n    <Container>\n      <Title>Incidents</Title>\n      {!loading || hasMounted ? (\n        incidents?.length > 0 ? (\n          incidents?.map((incident) => (\n            <Incident key={incident.id} incident={incident} />\n          ))\n        ) : (\n          <NoFound>No Incidents found.</NoFound>\n        )\n      ) : (\n        <>\n          <Skeleton />\n          <Skeleton />\n          <Skeleton />\n        </>\n      )}\n    </Container>\n  );\n};\n\nexport default Incidents;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport moment from \"moment\";\nimport ReactMarkdown from \"react-markdown\";\n\nconst Maintenance = styled.div`\n  transition: 0.3s;\n  border-left: 16px solid\n    ${(props) =>\n      props.active ? \"rgba(177, 177, 177,0.2)\" : \"rgba(73, 144, 226, 0.2)\"};\n  background-color: white;\n  border-radius: 3px;\n  padding: 16px;\n  box-shadow: 0px 0px 33px -32px rgba(0, 0, 0, 0.75);\n  margin-top: 8px;\n\n  :not(:last-child) {\n    margin-bottom: 16px;\n  }\n`;\n\nconst Details = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 3px;\n`;\n\nconst Title = styled.div`\n  margin-right: 16px;\n  font-weight: bold;\n  margin-bottom: 8px;\n  color: #1e1e1e;\n`;\n\nconst Comment = styled.div`\n  white-space: break-spaces;\n  color: #1e1e1e;\n`;\n\nconst Status = styled.div`\n  color: ${(props) => (props.active ? \"#6e6b6b\" : \"#2f5888\")};\n  background-color: ${(props) =>\n    props.active ? \"rgba(177, 177, 177, 0.1)\" : \"rgba(73, 144, 226, 0.1)\"};\n  padding: 5px 12px;\n  border-radius: 16px;\n  font-size: 13px;\n  transition: 0.3s;\n`;\n\nconst Created = styled.div`\n  font-size: 13px;\n  color: #6e6b6b;\n  font-weight: bold;\n`;\n\nexport default ({ maintenance }) => (\n  <Maintenance active={maintenance.closed_at}>\n    <Details>\n      <Created>\n        {moment(maintenance.created_at)\n          .format(\"MMMM Do YYYY, h:mm a\")\n          .toUpperCase()}\n      </Created>\n      <Status active={maintenance.closed_at}>\n        {maintenance.closed_at ? \"Closed\" : \"Active\"}\n      </Status>\n    </Details>\n    <Title><a href={maintenance.html_url}>{maintenance.title}</a></Title>\n    <Comment>\n      <ReactMarkdown source={maintenance.closed_at ? \"\" : maintenance.body} />\n    </Comment>\n  </Maintenance>\n);\n","import styled from \"styled-components\";\n\nexport default styled.div`\n  width: 100%;\n  height: 84px;\n  border-radius: 3px;\n  background-color: white;\n  box-shadow: 0px 0px 33px -32px rgba(0, 0, 0, 0.75);\n\n  :not(:last-child) {\n    margin-bottom: 8px;\n  }\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport Maintenance from \"./maintenance\";\nimport Skeleton from \"./skeleton\";\nimport useDidMount from \"../useDidMount\";\n\nconst Container = styled.div`\n  margin: 32px auto 0 auto;\n  max-width: 1040px;\n`;\n\nconst Title = styled.div`\n  padding: 0 16px;\n  font-size: 20px;\n  margin-bottom: 16px;\n`;\n\nconst NoFound = styled.div`\n  margin: 0 8px;\n`;\n\nexport default ({ loading, smaintenance }) => {\n  const [hasMounted] = useDidMount();\n\n  return (\n    <Container>\n      <Title>Scheduled Maintenance</Title>\n      {!loading || hasMounted ? (\n        smaintenance?.length > 0 ? (\n          smaintenance?.map((maintenance) => (\n            <Maintenance key={maintenance.id} maintenance={maintenance} />\n          ))\n        ) : (\n          <NoFound>No Maintenance found.</NoFound>\n        )\n      ) : (\n        <>\n          <Skeleton />\n          <Skeleton />\n          <Skeleton />\n        </>\n      )}\n    </Container>\n  );\n};\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst Container = styled.div`\n  display: flex;\n  justify-content: space-between;\n  margin-top: 16px;\n`;\n\nconst Branding = styled.a`\n  color: #6e6b6b;\n  font-size: 13px;\n  text-decoration: none;\n  transition: 0.3s;\n  display: ${(props) => (props.visible ? \"block\" : \"none\")};\n\n  :hover {\n    opacity: 0.9;\n  }\n`;\n\nconst Footer = () => (\n  <Container>\n    <div></div>\n    <Branding\n      visible={process.env.REACT_APP_BRANDING !== \"false\"}\n      href=\"https://github.com/tadhglewis/issue-status\"\n      rel=\"noopener\"\n      target=\"_blank\"\n    >\n      Powered by Issue Status\n    </Branding>\n  </Container>\n);\n\nexport default Footer;\n","import React from \"react\";\nimport \"./App.css\";\nimport styled from \"styled-components\";\nimport Status from \"./status\";\nimport useIssues from \"./useIssues\";\nimport Header from \"./header\";\nimport Components from \"./components\";\nimport Incidents from \"./incidents\";\nimport Maintenance from \"./smaintenance\";\nimport Footer from \"./footer\";\n\nconst Container = styled.div`\n  max-width: 1008px;\n  padding: 16px;\n  margin: 16px auto;\n`;\n\nconst ComponentsContainer = styled.div`\n  box-shadow: 0px 0px 33px -32px rgba(0, 0, 0, 0.75);\n  border-radius: 3px;\n  background-color: white;\n  padding: 50px;\n`;\n\nexport default () => {\n  // loading, errors, results, refetch\n  const [\n    componentsLoading,\n    componentsError,\n    componentsResults,\n    componentsRefetch,\n  ] = useIssues(\"component\");\n  const [\n    incidentsLoading,\n    incidentsError,\n    incidentsResults,\n    incidentsRefetch,\n  ] = useIssues(\"incident\");\n  const [\n    smaintenanceLoading,\n    smaintenanceError,\n    smaintenanceResults,\n    smaintenanceRefetch,\n  ] = useIssues(\"maintenance\");\n\n  return (\n    <Container>\n      <Header />\n      <ComponentsContainer>\n        <Status\n          loading={componentsLoading || incidentsLoading || smaintenanceError}\n          error={{\n            hasError: componentsError || incidentsError || smaintenanceError,\n            errors: { componentsError, incidentsError, smaintenanceError },\n          }}\n          components={componentsResults}\n          refetch={() => {\n            componentsRefetch();\n            incidentsRefetch();\n            smaintenanceRefetch();\n          }}\n        />\n        <Components\n          loading={componentsLoading}\n          components={componentsResults}\n        />\n      </ComponentsContainer>\n      <Maintenance loading={smaintenanceLoading} smaintenance={smaintenanceResults} />\n      <Incidents loading={incidentsLoading} incidents={incidentsResults} />\n      <Footer />\n    </Container>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}